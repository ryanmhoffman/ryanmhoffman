<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ryan M. Hoffman</title>
    <link>https://ryanmhoffman.github.io/tags/programming/index.xml</link>
    <description>Recent content on Ryan M. Hoffman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2016 RMH Companies; all rights reserved.</copyright>
    <atom:link href="https://ryanmhoffman.github.io/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Android Studio Keyboard Shortcuts</title>
      <link>https://ryanmhoffman.github.io/blog/2016/11/21/android-studio-shortcuts/</link>
      <pubDate>Mon, 21 Nov 2016 13:47:08 +0200</pubDate>
      
      <guid>https://ryanmhoffman.github.io/blog/2016/11/21/android-studio-shortcuts/</guid>
      <description>

&lt;h2 id=&#34;android-studio-shortcuts&#34;&gt;Android Studio Shortcuts&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://ryanmhoffman.github.io/img/banners/android-studio.png&#34; style=&#34;width: 100%; height: 100%&#34;/&gt;&lt;/p&gt;

&lt;p&gt;If you have used Android Studio for even a short time I&amp;rsquo;m sure you have found some shortcuts and hot keys
to speed up your coding and keep your hands on the keyboard where they belong! I&amp;rsquo;m going to run through
some of the shortcuts I find most useful. Android Studio is built by Google, but it is based on Jetbrains
Intellij Community Edition Java IDE. This means that all of the Intellij shortcut keys work on Android
Studio, but Google have added a few of their own. Let&amp;rsquo;s jump into some of the best ones.&lt;/p&gt;

&lt;h3 id=&#34;searching-for-a-shortcut&#34;&gt;Searching For A Shortcut&lt;/h3&gt;

&lt;p&gt;Stop me if this has happened to you before. You read an awesome tutorial on shortcuts and hot keys in
Android Studio and found a few that looked really useful, but when you sit down and start coding you
can&amp;rsquo;t remember what they were. Fortunately someone thought of this and made several several search
functions.&lt;/p&gt;

&lt;h4 id=&#34;search-everywhere&#34;&gt;Search everywhere:&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Shift Shift&lt;/strong&gt; (Windows, Linux, Mac)
This searches literally everywhere. It can even search outside of the scope of your project if you want
it to (every file on your computer). Thankfully it groups what it finds into categories, with the most
recent files first.&lt;/p&gt;

&lt;h4 id=&#34;search-for-commands&#34;&gt;Search for commands:&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Command + Shift + A&lt;/strong&gt; (Mac)
&lt;strong&gt;Control + Shift + A&lt;/strong&gt; (Windows, Linux)
This searches for any command. If you know there is a way to jump to the next error in your code but you
can&amp;rsquo;t remember what it is, just use this command and start typing &amp;ldquo;error&amp;rdquo; and it will intelligently find
it. This works for any command. If you only want to memorize one shortcut, this is the one.&lt;/p&gt;

&lt;h3 id=&#34;navigation&#34;&gt;Navigation&lt;/h3&gt;

&lt;p&gt;Here are a few more ways to keep your hands off the mouse and still get around your project quickly.&lt;/p&gt;

&lt;h4 id=&#34;jump-to-class&#34;&gt;Jump to Class&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Command + O&lt;/strong&gt; (Mac)
&lt;strong&gt;Control + N&lt;/strong&gt; (Windows, Linux)&lt;/p&gt;

&lt;h4 id=&#34;jump-to-file&#34;&gt;Jump to File&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Command + Shift + O&lt;/strong&gt; (Mac)
&lt;strong&gt;Control + Shift + N&lt;/strong&gt; (Windows, Linux)&lt;/p&gt;

&lt;h4 id=&#34;jump-to-method&#34;&gt;Jump to Method&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Control + Up/Down&lt;/strong&gt; (Mac)
&lt;strong&gt;Alt + Up/Down&lt;/strong&gt; (Windows, Linux)
Up is the previous method, down is the next method.&lt;/p&gt;

&lt;h3 id=&#34;editing-code&#34;&gt;Editing Code&lt;/h3&gt;

&lt;p&gt;This is the one we try to spend the most time on, and even though searching for the correct command is
easy with the shortcut above, it is still quicker to memorize these shortcuts and add them to our
workflow. These will really help you get &lt;em&gt;past&lt;/em&gt; the editor and focus only on the editing.&lt;/p&gt;

&lt;h4 id=&#34;auto-completion&#34;&gt;Auto-Completion&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Tab&lt;/strong&gt; (Mac, Windows, Linux)
&lt;strong&gt;Enter&lt;/strong&gt; (Mac, Windows, Linux)&lt;/p&gt;

&lt;h4 id=&#34;comments&#34;&gt;Comments&lt;/h4&gt;

&lt;p&gt;Single Line Comment
&lt;strong&gt;Command + /&lt;/strong&gt; (Mac)
&lt;strong&gt;Control + /&lt;/strong&gt; (Windows, Linux)
Multi Line Comment
&lt;strong&gt;Command + Alt + /&lt;/strong&gt; (Mac)
&lt;strong&gt;Control + Shift + /&lt;/strong&gt; (Windows, Linux)&lt;/p&gt;

&lt;h4 id=&#34;show-parameters&#34;&gt;Show Parameters&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Command + p&lt;/strong&gt; (Mac)
&lt;strong&gt;Control + p&lt;/strong&gt; (Windows, Linux)
This one is useful if you can&amp;rsquo;t remember what parameters a method takes.&lt;/p&gt;

&lt;h4 id=&#34;refactoring&#34;&gt;Refactoring&lt;/h4&gt;

&lt;p&gt;Renaming a variable/method/class etc.
&lt;strong&gt;Shift + F6&lt;/strong&gt; (Mac)
&lt;strong&gt;Control + F6&lt;/strong&gt; (Windows, Linux)&lt;/p&gt;

&lt;h4 id=&#34;intelligent-code-generation&#34;&gt;Intelligent Code Generation&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Command + N&lt;/strong&gt; (Mac)
&lt;strong&gt;Alt + Insert&lt;/strong&gt; (Windows, Linux)&lt;/p&gt;

&lt;h4 id=&#34;live-templates&#34;&gt;Live Templates&lt;/h4&gt;

&lt;p&gt;There are dozens of these available by default, and the great thing about Android Studio is that you
have the freedom to create more if you wish. If you don&amp;rsquo;t know what live templates are, they are
boilerplate sections of code that gets automatically inserted for you. All you have to do is tab through
to fill in the variable values.&lt;/p&gt;

&lt;p&gt;A commonly used one is &amp;ldquo;Toast&amp;rdquo;. You type &amp;ldquo;Toast&amp;rdquo; and hit &lt;strong&gt;Tab&lt;/strong&gt; and it automatically gives you this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Toast.makeText(MainActivity.this, &amp;quot;&amp;quot;, Toast.LENGTH_SHORT).show();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you hit &lt;strong&gt;Tab&lt;/strong&gt; a second time it moves the cursor over to the quotation marks so you can type your
message, and if you hit &lt;strong&gt;Tab&lt;/strong&gt; one more time it moves your cursor to the end of the line.&lt;/p&gt;

&lt;p&gt;Another common one is to type &amp;ldquo;fori&amp;rdquo; and hit &lt;strong&gt;Tab&lt;/strong&gt;. That gives you this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for(i = 0; i &amp;lt; ; i++){

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course tabbing through allows you to modify the variable name, value, loop length, and finally it
drops you inside the curly brackets to write the code to be executed.&lt;/p&gt;

&lt;p&gt;As I mentioned there are dozens more and you can create your own. To find all the live templates
included just search everywhere with &lt;strong&gt;Shift Shift&lt;/strong&gt; and type &amp;ldquo;Live Templates&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Thank you for reading this. I hope some of these tricks will help you become a better and faster
developer. If you want the full and overwhelming list of shortcuts for Android Studio you can check out
the list &lt;a href=&#34;https://developer.android.com/studio/intro/keyboard-shortcuts.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As always, please follow me on twitter &lt;a href=&#34;https://www.twitter.com/hoffmanryan1&#34;&gt;@hoffmanryan1&lt;/a&gt; and on
medium &lt;a href=&#34;https://www.medium.com/@rmhcompanies&#34;&gt;@rmhcompaines&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Constraint Layout</title>
      <link>https://ryanmhoffman.github.io/blog/2016/11/15/constraint-layout/</link>
      <pubDate>Tue, 15 Nov 2016 13:47:08 +0200</pubDate>
      
      <guid>https://ryanmhoffman.github.io/blog/2016/11/15/constraint-layout/</guid>
      <description>

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;There are many different views and view groups in the Android infrastructure. Some are more useful than
others, but they all have their place. Recently, Google released a new layout called ConstraintLayout.&lt;/p&gt;

&lt;p&gt;This is still in alpha release stage but it looks very promising. This isn&amp;rsquo;t going to be a tutorial on how
to use it, rather, it&amp;rsquo;s just my thoughts and opinions on the concept and implementation. Keep in mind I
have only been messing around with it for a couple of weeks, so my opinion could change as they update and
improve it.&lt;/p&gt;

&lt;h3 id=&#34;initial-thoughts&#34;&gt;Initial Thoughts&lt;/h3&gt;

&lt;p&gt;When I first heard about ConstraintLayout before I even tried it out I thought it sounded like a rip off
of iOS UI builder in xcode. After learning more about it and using it a little bit I still kind of feel
that way. That&amp;rsquo;s not to say it&amp;rsquo;s a bad thing, but even if it wasn&amp;rsquo;t copied directly from Apple it was at
least &lt;em&gt;heavily&lt;/em&gt; inspired by xcode. My initial reaction to this was to not like it. At all. I can stumble
my way through iOS development, but I&amp;rsquo;m not nearly as comfortable with iOS as I am with Android. And my
limited experience with the UI Builder in xcode is not good. I found it a little bit difficult to use and
setting constraints was hard to come to grips with coming from XML layouts in Android. Then Android was
switching to ConstraintLayout to mimic iOS? Not a big fan of that idea.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t know what ConstraintLayout is, you can get more details about it
&lt;a href=&#34;https://developer.android.com/training/constraint-layout/index.html&#34;&gt;here&lt;/a&gt;. Basically you drag views and
widgets onto the design screen and then set &amp;ldquo;constraints&amp;rdquo; that tell where each view should be positioned
relative to everything else on the screen. The purpose of it is to flatten the hierarchy of the view tree.
Instead of nesting LinearLayout&amp;rsquo;s and RelativeLayout&amp;rsquo;s trying to position everything properly, this allows
you to position everything relative to whatever you need to in order to lay it all out properly. It is
supposed to help improve performance and make it scale across different screen sizes easier. I have not
tested performance or scalability so I don&amp;rsquo;t know if it is actually better in those regards. If you run
any tests please let me know the results, I&amp;rsquo;ll add them here and credit you.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ryanmhoffman.github.io/img/banners/layout-editor.png&#34; style=&#34;width: 100%; height: 100%&#34;/&gt;&lt;/p&gt;

&lt;h2 id=&#34;after-using-it-to-design-screens&#34;&gt;After Using it to Design Screens&lt;/h2&gt;

&lt;p&gt;I decided to give it the benefit of the doubt and it appeared to be the future of Android development so I
figured I needed to get on board. Using it was definitely weird at first, but after a while of making
different layouts I started to get used to it a little bit. Sometimes it was a little buggy, but that&amp;rsquo;s to
be expected from an alpha version.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s going to take some getting used to, but it looks promising. There are a few things I liked, and of
course plenty that I didn&amp;rsquo;t.&lt;/p&gt;

&lt;h3 id=&#34;the-good&#34;&gt;The Good&lt;/h3&gt;

&lt;p&gt;Overall the experience is good. Setting constraints is as easy as click and drag, and it is pretty
intelligent on knowing what you are trying to do. Linking views together is pretty simple, and pinning a
view to an edge or margin is also straightforward.&lt;/p&gt;

&lt;p&gt;I also like that as you make changes in the editor you can still switch over to the XML and see what is
actually changing, and if you really want you could make changes directly to the XML.&lt;/p&gt;

&lt;h3 id=&#34;the-not-so-good&#34;&gt;The Not So Good&lt;/h3&gt;

&lt;p&gt;When editing the screens there are 2 screens shown, one is the blueprint screen and one is the design
screen. The blueprint screen is meant for editing and adding constraints, while the design screen is meant
as a actual preview of what is on the screen, content and all. My problem is that you can edit constraints
(or anything really) on the design screen. It causes some bugs and issues with the layout preview, and
it&amp;rsquo;s just overall confusing. I wish they only allowed editing in the blueprint mode and the preview was
exactly that, just a preview. Perhaps in a future release they will make that change.&lt;/p&gt;

&lt;h2 id=&#34;final-thoughts&#34;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;It is still going to take some getting used to, but I see this as the future of Android design and
development and I really am excited about what Google is going to add down the road. I&amp;rsquo;m going to
continue to use it and learn more about it and perhaps start actually using it in projects here soon. At
it&amp;rsquo;s current stage I don&amp;rsquo;t think it is production ready, but that could change with a new release. I&amp;rsquo;ll
keep this updated as new versions come out and I learn more about it. If I get more comfortable with it I
may even write a tutorial.&lt;/p&gt;

&lt;p&gt;As always, please follow me on twitter &lt;a href=&#34;https://www.twitter.com/hoffmanryan1&#34;&gt;@hoffmanryan1&lt;/a&gt; and on medium
&lt;a href=&#34;https://www.medium.com/@rmhcompanies&#34;&gt;@rmhcompaines&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CBT Velocity Android App</title>
      <link>https://ryanmhoffman.github.io/blog/2016/11/02/velocity-android-app/</link>
      <pubDate>Wed, 02 Nov 2016 13:47:08 +0200</pubDate>
      
      <guid>https://ryanmhoffman.github.io/blog/2016/11/02/velocity-android-app/</guid>
      <description>

&lt;h2 id=&#34;the-idea&#34;&gt;The Idea&lt;/h2&gt;

&lt;p&gt;This app was created for high school students. Specifically, the high school students in my church, Canton
Baptist Temple, who are a part of the youth group which is called - as you might have guessed, Velocity.
The thinking behind this is pretty simple and makes a lot of sense if you have ever spent any time around
high school students. The issue is that no matter how many times you tell them something, they still have
no idea what you said - unless you put it right in front of them on their phone.&lt;/p&gt;

&lt;p&gt;The problem we had was that we would announce class activities, mail out fliers, and have sign up sheets
in the class, yet we would still have parents and students calling a couple days before hand to ask for
all the details we had already made sure were available. We decided the best way to get them this info
was on their phone in an app with notifications and reminders and all the details they need.&lt;/p&gt;

&lt;h2 id=&#34;development-and-vision&#34;&gt;Development and Vision&lt;/h2&gt;

&lt;p&gt;CBT Velocity is a native app designed for the Android platform. It is coded in Java and XML, and I host
all of the content used in the app on my LAMP (Linux Apache MySQL PHP) server. As you can tell from the
screenshots I used material design for the UI/UX and I tried to keep it simple with a card based layout.
The cards are set in a RecyclerView and each card is retrieved over the network from my server. The
navigation drawer contains links to other related social media pages, and to the settings, where you can
configure data/wifi usage and turn notifications on/off.&lt;/p&gt;

&lt;p&gt;There are a couple things not implemented yet that I plan to add eventually. The first is going to be
in-app sign up for activities. I want the students to be able to log in to the app, click on the activity
and sign up there instead of the paper sheets we have in the class. The next one piggy-backs on that, and
it is to have in app payment for the activities. Instead of remembering to bring $20 to church or to the
activity, they should be able to log in and securely pay us right from within the app.&lt;/p&gt;

&lt;p&gt;The whole app is open source, please check it out at &lt;a href=&#34;https://github.com/ernieb4768/CBTVelocity&#34;&gt;github&lt;/a&gt;
and let me know what you think!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ryanmhoffman.github.io/img/banners/cbt-velocity-activities.png&#34; style=&#34;width: 33%; height: 33%; padding: 5px&#34;/&gt; &lt;img src=&#34;https://ryanmhoffman.github.io/img/banners/cbt-velocity-about-us.png&#34; style=&#34;width: 33%; height: 33%; padding: 5px&#34;/&gt; &lt;img src=&#34;https://ryanmhoffman.github.io/img/banners/cbt-velocity-nav-drawer.png&#34; style=&#34;width: 33%; height: 33%; padding: 5px&#34;/&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>